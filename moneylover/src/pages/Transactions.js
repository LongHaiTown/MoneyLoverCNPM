import React, { useEffect, useState } from "react";
import { getWallets, getExpenses, createExpense } from "../services/api"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
import ExpenseForm from "../components/ExpenseForm"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
import TransactionList from "../components/TransactionList"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
import ExpenseList from "../pages/ExpenseList"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
import "./Transactions.css"; // Import file CSS

const Transactions = () => {
  const [wallets, setWallets] = useState([]);
  const [expenses, setExpenses] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [showExpenseList, setShowExpenseList] = useState(false);
  const [quickTransaction, setQuickTransaction] = useState("");
  const [selectedWallet, setSelectedWallet] = useState(null);
  const [showWalletTransactions, setShowWalletTransactions] = useState(false);

  // H√†m l·∫•y danh s√°ch v√≠
  const fetchWallets = async () => {
    try {
      const res = await getWallets();
      console.log("üìå Danh s√°ch v√≠ nh·∫≠n ƒë∆∞·ª£c:", res.data);
      setWallets(res.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y v√≠:", err);
    }
  };

  // H√†m l·∫•y danh s√°ch giao d·ªãch
  const fetchExpenses = async () => {
    try {
      const res = await getExpenses();
      console.log("üìå Danh s√°ch giao d·ªãch nh·∫≠n ƒë∆∞·ª£c:", res.data);
      // S·∫Øp x·∫øp giao d·ªãch theo ng√†y m·ªõi nh·∫•t tr∆∞·ªõc khi set state (t√πy ch·ªçn)
      const sortedExpenses = res.data.sort((a, b) => new Date(b.date) - new Date(a.date));
      setExpenses(sortedExpenses);
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y giao d·ªãch:", err);
    }
  };

  // G·ªçi API khi component mount l·∫ßn ƒë·∫ßu
  useEffect(() => {
    fetchWallets();
    fetchExpenses();
  }, []);

  // X·ª≠ l√Ω t·∫°o giao d·ªãch nhanh
  const handleQuickTransaction = async () => {
    if (!quickTransaction.trim()) return; // B·ªè qua n·∫øu input r·ªóng

    // Ch·ªçn v√≠ ƒë·∫ßu ti√™n l√†m m·∫∑c ƒë·ªãnh n·∫øu c√≥, n·∫øu kh√¥ng th√¨ c·∫ßn x·ª≠ l√Ω logic kh√°c (v√≠ d·ª•: b√°o l·ªói)
    const defaultWalletId = wallets.length > 0 ? wallets[0].id : null;
    if (!defaultWalletId) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y v√≠ ƒë·ªÉ t·∫°o giao d·ªãch nhanh.");
      // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng ·ªü ƒë√¢y
      return;
    }

    // Gi·∫£ s·ª≠ category m·∫∑c ƒë·ªãnh l√† 1 (c·∫ßn ƒëi·ªÅu ch·ªânh theo th·ª±c t·∫ø)
    const defaultCategoryId = 1;

    try {
      const data = {
        title: quickTransaction,
        amount: 0, // Giao d·ªãch nhanh m·∫∑c ƒë·ªãnh s·ªë ti·ªÅn 0 (ho·∫∑c b·∫°n c√≥ th·ªÉ th√™m input cho s·ªë ti·ªÅn)
        date: new Date().toISOString().split("T")[0], // L·∫•y ng√†y hi·ªán t·∫°i
        category_id: defaultCategoryId,
        wallet_id: defaultWalletId,
      };
      await createExpense(data);
      setQuickTransaction(""); // X√≥a input sau khi g·ª≠i
      // L·∫•y l·∫°i d·ªØ li·ªáu m·ªõi
      fetchExpenses();
      fetchWallets();
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫°o giao d·ªãch nhanh:", err);
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng n·∫øu c·∫ßn
    }
  };

  // X·ª≠ l√Ω t·∫°o giao d·ªãch t·ª´ form
  const handleCreateExpense = (data) => {
    // Chuy·ªÉn ƒë·ªïi amount t·ª´ string (c√≥ th·ªÉ c√≥ d·∫•u ph·∫©y/ch·∫•m) th√†nh number
    const amountValue = parseFloat(String(data.amount).replace(/[,.]/g, ''));
    if (isNaN(amountValue)) {
        console.error("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá:", data.amount);
        // Th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
        return;
    }

    const formattedData = {
      title: data.title,
      amount: amountValue,
      date: data.date,
      category_id: parseInt(data.category_id),
      wallet_id: parseInt(data.wallet_id),
    };
    createExpense(formattedData)
      .then(() => {
        // L·∫•y l·∫°i d·ªØ li·ªáu m·ªõi
        fetchExpenses();
        fetchWallets();
        setShowForm(false); // ƒê√≥ng form sau khi th√†nh c√¥ng
      })
      .catch((err) => {
          console.error("‚ùå L·ªói khi t·∫°o giao d·ªãch:", err);
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng n·∫øu c·∫ßn
       });
  };

  // X·ª≠ l√Ω khi nh·∫•n v√†o m·ªôt v√≠
  const handleWalletClick = (wallet) => {
    setSelectedWallet(wallet);
    setShowWalletTransactions(true); // M·ªü modal hi·ªÉn th·ªã giao d·ªãch c·ªßa v√≠ ƒë√≥
  };

  // L·ªçc c√°c giao d·ªãch thu·ªôc v·ªÅ v√≠ ƒëang ƒë∆∞·ª£c ch·ªçn
  const walletTransactions = selectedWallet
    ? expenses.filter((expense) => expense.wallet_id === selectedWallet.id)
    : [];

  return (
    <div className="transactions-container" id="transactions">
      {/* Header ch√≠nh c·ªßa trang */}
      <header className="header">
        <h1>Money lover fake</h1>
        <p>Fake nh∆∞ng thu chi l√† chu·∫©n</p>
      </header>

      {/* Ph·∫ßn hi·ªÉn th·ªã c√°c v√≠ */}
      <section className="wallet-section">
        <h2>V√≠ c·ªßa b·∫°n</h2>
        <div className="wallet-container">
          {wallets.length > 0 ? (
            wallets.map((wallet) => {
              // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p balance kh√¥ng ph·∫£i l√† s·ªë
              const displayBalance = isNaN(parseFloat(wallet.balance))
                ? 0
                : parseFloat(wallet.balance);
              return (
                <div
                  key={wallet.id}
                  className="wallet-card"
                  onClick={() => handleWalletClick(wallet)}
                >
                  <p className="wallet-title">{wallet.name}</p>
                  <p className="wallet-balance">
                    Hi·ªán c√≥ <br />
                    <span
                      style={{
                        color: displayBalance >= 0 ? "#2a9d8f" : "#e76f51", // M√†u s·∫Øc t√πy ch·ªânh
                      }}
                    >
                      {/* Th√™m d·∫•u + ho·∫∑c - v√† ƒë·ªãnh d·∫°ng s·ªë */}
                      {displayBalance >= 0 ? "+" : "-"}
                      {Math.abs(displayBalance).toLocaleString("vi-VN")} VND
                    </span>
                  </p>
                </div>
              );
            })
          ) : (
            <p>Ch∆∞a c√≥ v√≠ n√†o. H√£y t·∫°o v√≠ m·ªõi!</p> // Th√¥ng b√°o th√¢n thi·ªán h∆°n
          )}
        </div>
      </section>

      {/* Ph·∫ßn nh·∫≠p li·ªáu v√† n√∫t ch·ª©c nƒÉng */}
      <section className="transaction-section">
        <h2>Giao d·ªãch</h2>
        {/* Input nh·∫≠p giao d·ªãch nhanh */}
        <div className="quick-transaction">
          <input
            type="text"
            placeholder="H√¥m nay b·∫°n ti√™u g√¨ ü§ëü§î?"
            value={quickTransaction}
            onChange={(e) => setQuickTransaction(e.target.value)}
            // Cho ph√©p g·ª≠i b·∫±ng Enter
            onKeyPress={(e) => { if (e.key === 'Enter') handleQuickTransaction(); }}
          />
          <button onClick={handleQuickTransaction}>G·ª≠i</button>
        </div>
        {/* C√°c n√∫t m·ªü modal */}
        <div className="transaction-buttons">
          <button className="primary" onClick={() => setShowForm(true)}>
            Nh·∫≠p giao d·ªãch m·ªõi
          </button>
          <button onClick={() => setShowExpenseList(true)}>
            Xem t·∫•t c·∫£ giao d·ªãch
          </button>
        </div>

        {/* --- Modal Th√™m m·ªõi giao d·ªãch --- */}
        {showForm && (
          <div className="modal">
            <div className="modal-content">
              {/* Header c·ªßa Modal */}
              <div className="modal-header">
                <div className="modal-header-title">
                   <h3>Th√™m m·ªõi giao d·ªãch</h3>
                </div>
                <div className="modal-header-close">
                  <button
                    className="close-button"
                    title="ƒê√≥ng" // Th√™m tooltip
                    onClick={() => setShowForm(false)}
                  >
                    ‚úï {/* Icon X */}
                  </button>
                </div>
              </div>
              {/* N·ªôi dung c·ªßa Modal */}
              <div className="modal-body">
                {/* Truy·ªÅn danh s√°ch v√≠ v√†o Form ƒë·ªÉ ch·ªçn */}
                <ExpenseForm onSubmit={handleCreateExpense} wallets={wallets} />
              </div>
            </div>
          </div>
        )}

        {/* --- Modal Danh s√°ch t·∫•t c·∫£ giao d·ªãch --- */}
        {showExpenseList && (
          <div className="modal">
            <div className="modal-content">
              {/* Header c·ªßa Modal */}
              <div className="modal-header">
                 <div className="modal-header-title">
                    <h3>Danh s√°ch</h3>
                 </div>
                 <div className="modal-header-close">
                    <button
                      className="close-button"
                      title="ƒê√≥ng"
                      onClick={() => setShowExpenseList(false)}
                    >
                      ‚úï {/* Icon X */}
                    </button>
                 </div>
              </div>
              {/* N·ªôi dung c·ªßa Modal */}
              <div className="modal-body">
                {/* Truy·ªÅn h√†m c·∫≠p nh·∫≠t v√† danh s√°ch giao d·ªãch */}
                <ExpenseList onUpdate={fetchExpenses} initialExpenses={expenses} />
              </div>
            </div>
          </div>
        )}

        {/* --- Modal Giao d·ªãch c·ªßa V√≠ c·ª• th·ªÉ --- */}
        {showWalletTransactions && selectedWallet && (
          <div className="modal">
            <div className="modal-content">
              {/* Header c·ªßa Modal */}
              <div className="modal-header">
                 <div className="modal-header-title">
                    {/* Hi·ªÉn th·ªã t√™n v√≠ trong ti√™u ƒë·ªÅ */}
                    <h3>Giao d·ªãch c·ªßa {selectedWallet.name}</h3>
                 </div>
                 <div className="modal-header-close">
                    <button
                      className="close-button"
                      title="ƒê√≥ng"
                      onClick={() => setShowWalletTransactions(false)}
                    >
                       ‚úï {/* Icon X */}
                    </button>
                 </div>
              </div>
              {/* N·ªôi dung c·ªßa Modal */}
              <div className="modal-body">
                <div className="wallet-transaction-list">
                  {walletTransactions.length > 0 ? (
                    // Nh√≥m giao d·ªãch theo ng√†y (gi·ªëng ExpenseList)
                    Object.entries(
                        walletTransactions.reduce((acc, expense) => {
                            const date = new Date(expense.date).toISOString().split('T')[0];
                            if (!acc[date]) acc[date] = [];
                            acc[date].push(expense);
                            return acc;
                        }, {})
                    )
                    .sort(([dateA], [dateB]) => new Date(dateB) - new Date(dateA)) // S·∫Øp x·∫øp ng√†y m·ªõi nh·∫•t tr∆∞·ªõc
                    .map(([date, items]) => (
                        <div key={date} className="expense-group">
                            <div className="expense-group-header">
                                <h4 className="expense-date">
                                    {new Date(date).toLocaleDateString("vi-VN", { weekday: 'long', day: 'numeric', month: 'numeric', year: 'numeric' })}
                                </h4>
                                {/* T√≠nh t·ªïng ti·ªÅn theo ng√†y n·∫øu c·∫ßn */}
                            </div>
                            {items.map((expense) => (
                                <div key={expense.id} className="transaction-item"> {/* D√πng class chung n·∫øu mu·ªën style gi·ªëng */}
                                    <div className="expense-avatar"> {/* Th√™m avatar n·∫øu c·∫ßn */}
                                        <div className="avatar-placeholder"></div>
                                    </div>
                                    <div className="expense-details">
                                        <p className="expense-title">{expense.title}</p>
                                        <p className="expense-description">{expense.category?.name || 'Ch∆∞a ph√¢n lo·∫°i'}</p>
                                    </div>
                                    <div className="expense-amount-container">
                                        <p className="expense-amount" style={{ color: expense.category?.type === 'income' ? '#2a9d8f' : '#e76f51', margin: 0 }}>
                                            {expense.category?.type === 'income' ? '+' : '-'}
                                            {Math.abs(expense.amount).toLocaleString('vi-VN')} VND
                                        </p>
                                    </div>
                                    {/* Th√™m n√∫t S·ª≠a/X√≥a ·ªü ƒë√¢y n·∫øu c·∫ßn cho danh s√°ch n√†y */}
                                    {/* <div className="expense-action-buttons">
                                        <button>S·ª≠a</button>
                                        <button>X√≥a</button>
                                    </div> */}
                                </div>
                             ))}
                        </div>
                    ))
                  ) : (
                    <p>Ch∆∞a c√≥ giao d·ªãch n√†o cho v√≠ n√†y.</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </section>

      {/* Ph·∫ßn hi·ªÉn th·ªã giao d·ªãch g·∫ßn ƒë√¢y */}
      <section className="recent-transactions">
        <h2>Giao d·ªãch g·∫ßn ƒë√¢y</h2>
        {/* Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng giao d·ªãch hi·ªÉn th·ªã */}
        <TransactionList expenses={expenses.slice(0, 5)} /> {/* Hi·ªÉn th·ªã 5 giao d·ªãch m·ªõi nh·∫•t */}
      </section>
    </div>
  );
};

export default Transactions;