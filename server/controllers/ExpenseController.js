const Expense = require("../models/ExpenseModel");
const Wallet = require("../models/WalletModel");
const sequelize = require("../config/db"); // Import sequelize t·ª´ file c·∫•u h√¨nh

// import { GoogleGenerativeAI } from "@google/generative-ai";
// import dotenv from "dotenv";

// dotenv.config();
// const genAI = new GoogleGenerativeAI(pAIzaSyBTl0pu_mgeRohVHdWAM_RZs6vswD80OAs);
// const model = genAI.getGenerativeModel({ model: "gemini-pro" });

// export const analyzeExpenses = async (req, res) => {
//   try {
//     const { user_id } = req.params;

//     // L·∫•y d·ªØ li·ªáu chi ti√™u t·ª´ DB
//     const expenses = await Expense.findAll({
//       where: { user_id },
//       include: [{ model: sequelize.models.Category, attributes: ["name", "type"] }],
//       order: [["date", "ASC"]],
//     });

//     if (!expenses || expenses.length === 0) {
//       return res.status(404).json({ error: "Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u" });
//     }

//     // Chu·∫©n b·ªã d·ªØ li·ªáu cho AI
//     const expenseData = expenses.map((expense) => ({
//       date: expense.date,
//       category: expense.Category.name,
//       amount: expense.amount,
//       description: expense.description || "",
//     }));

//     const prompt = `Ph√¢n t√≠ch chi ti√™u v√† thu nh·∫≠p c·ªßa t√¥i v√† d·ª± ƒëo√°n chi ti√™u trong t∆∞∆°ng lai c·ªßa t√¥i d·ª±a tr√™n d·ª± li·ªáu n√†y: ${JSON.stringify(expenseData)}`;

//     // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini AI
//     const response = await model.generateContent(prompt);
//     const analysis = await response.response.text(); // L·∫•y n·ªôi dung ph·∫£n h·ªìi

//     res.json({ analysis });
//   } catch (err) {
//     console.error("‚ùå L·ªói trong analyzeExpenses:", err);
//     res.status(500).json({ error: "L·ªói server khi ph√¢n t√≠ch chi ti√™u" });
//   }
// };


exports.createExpense = async (req, res) => {
  try {
    console.log("üìå D·ªØ li·ªáu nh·∫≠n t·ª´ client:", req.body);
    if (!req.body || Object.keys(req.body).length === 0) {
      return res.status(400).json({ error: "D·ªØ li·ªáu body r·ªóng" });
    }

    const { wallet_id, amount, category_id } = req.body;

    // Ki·ªÉm tra amount h·ª£p l·ªá
    if (isNaN(amount) || amount === null) {
      return res.status(400).json({ error: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }

    // L·∫•y th√¥ng tin category ƒë·ªÉ x√°c ƒë·ªãnh type (income/expense)
    const category = await sequelize.models.category.findByPk(category_id);
    if (!category) {
      return res.status(400).json({ error: "Category kh√¥ng t·ªìn t·∫°i" });
    }

    // T·∫°o expense
    const expense = await Expense.create(req.body);

    // C·∫≠p nh·∫≠t balance c·ªßa wallet
    const wallet = await Wallet.findByPk(wallet_id);
    if (!wallet) {
      return res.status(400).json({ error: "Wallet kh√¥ng t·ªìn t·∫°i" });
    }

    const currentBalance = isNaN(wallet.balance) ? 0.00 : parseFloat(wallet.balance);
    const isIncome = category.type === "income";
    wallet.balance = isIncome
      ? currentBalance + parseFloat(amount)
      : currentBalance - parseFloat(amount);
    await wallet.save();

    res.status(201).json({ id: expense.id });
  } catch (err) {
    console.error("‚ùå L·ªói trong createExpense:", err);
    res.status(500).json({ error: "L·ªói server khi t·∫°o expense" });
  }
};

exports.getAllExpenses = async (req, res) => {
  try {
    const expenses = await Expense.getAll();
    res.json(expenses);
  } catch (err) {
    console.error("‚ùå L·ªói trong getAllExpenses:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
};

exports.deleteExpense = async (req, res) => {
  try {
    const expense = await Expense.getById(req.params.id);
    if (!expense) {
      return res.status(404).json({ error: "Expense kh√¥ng t·ªìn t·∫°i" });
    }

    const { wallet_id, amount, category_id } = expense;
    const category = await sequelize.models.category.findByPk(category_id);
    const wallet = await Wallet.findByPk(wallet_id);

    // Ho√†n l·∫°i balance tr∆∞·ªõc khi x√≥a
    const currentBalance = isNaN(wallet.balance) ? 0.00 : parseFloat(wallet.balance);
    const isIncome = category.type === "income";
    wallet.balance = isIncome
      ? currentBalance - parseFloat(amount)
      : currentBalance + parseFloat(amount);
    await wallet.save();

    await Expense.delete(req.params.id);
    res.sendStatus(200);
  } catch (err) {
    console.error("‚ùå L·ªói trong deleteExpense:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
};